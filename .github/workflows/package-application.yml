name: Build on Windows
on:
  push:
    branches: [ main ]
jobs:
  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Create matrix
        id: set-matrix
        # Run for all changes while developing
        # run: echo "matrix=$(git --no-pager diff --dirstat=files,0 HEAD~1 -- `find . -type d -name 'applications'` | sed -E 's/^[ 0-9.]+% //g' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
        run: echo "matrix=$(ls -d applications/* | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
  build:
    permissions:
      id-token: write
    needs: create-matrix
    runs-on: windows-latest
    if: ${{ needs.create-matrix.outputs.matrix != '[]' && needs.create-matrix.outputs.matrix != '' }}
    strategy:
      fail-fast: false
      matrix:
        template: ${{ fromJson(needs.create-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Template Values
        id: get-values
        shell: pwsh
        run: |
          $app=(Get-Content -Raw  ${{matrix.template}}/application.json | ConvertFrom-Json)
          $appName="${{matrix.template}}".Split("/")[1]
          Write-Output "TEMPLATE_XML_FILE_NAME=$($app.TemplateXmlFileName)" >> $env:GITHUB_ENV
          Write-Output "INSTALLATION_FILE_URL=$($app.InstallationFileUrl)" >> $env:GITHUB_ENV
          Write-Output "INSTALLATION_FILE_CHECKSUM=$($app.InstallationFileChecksum)" >> $env:GITHUB_ENV
          Write-Output "INSTALLATION_FILE_NAME=$($app.InstallationFileName)" >> $env:GITHUB_ENV
          Write-Output "APPLICATION_NAME=$appName" >> $env:GITHUB_ENV
          Get-Content $env:GITHUB_ENV
      - name: Install MSIX Packaging Tool
        env:
            MSIX_PACKAGING_TOOL_INSTALLTION_FILE_URL: ${{ vars.MSIX_PACKAGING_TOOL_INSTALLTION_FILE_URL }}
            MSIX_PACKAGING_TOOL_LICENSE_FILE_URL: ${{ vars.MSIX_PACKAGING_TOOL_LICENSE_FILE_URL }}
        shell: pwsh
        run: .\scripts\Install-MsixPackagingTool.ps1 -MSIXPackagingToolInstallationFileUrl $env:MSIX_PACKAGING_TOOL_INSTALLTION_FILE_URL -MSIXPackagingToolLicenseFileUrl $env:MSIX_PACKAGING_TOOL_LICENSE_FILE_URL
      - name: Install AzureSignTool
        run: |
          dotnet tool install --global AzureSignTool
          AzureSignTool --help
      - name: Download Installtion File
        shell: pwsh
        run: .\scripts\Download-InstallationFile.ps1 -InstallationFileUrl $env:INSTALLATION_FILE_URL -InstallationFileChecksum $env:INSTALLATION_FILE_CHECKSUM -InstallationFileName $env:INSTALLATION_FILE_NAME
      - name: Package Application
        shell: pwsh
        run: |
          .\scripts\Package-Application.ps1 `
            -InstallationFilePath "$env:TEMP\MSIXInstallationFiles\$env:INSTALLATION_FILE_NAME" `
            -ApplicationTemplateFilePath ".\applications\$env:APPLICATION_NAME\$env:TEMPLATE_XML_FILE_NAME" `
            -MSIXOutputFilePath ".\out\$env:APPLICATION_NAME.msix"
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: Get access token
        uses: azure/powershell@v1
        with:
          azPSVersion: "11.1.0"
          inlineScript: |
            $token = (Get-AzAccessToken -ResourceTypeName KeyVault).Token 
            Write-Output "::add-mask::$token"
            Write-Output "KV_TOKEN=$token" >> $env:GITHUB_ENV
      - name: Sign Application
        shell: pwsh
        env:
          AZ_KV_URL: ${{ vars.AZ_KV_URL }}
        run: |
          AzureSignTool.exe sign `
            --azure-key-vault-url "$env:AZ_KV_URL" `
            --azure-key-vault-accesstoken "$env:KV_TOKEN" `
            --azure-key-vault-certificate "msix-signing" `
            --file-digest "sha256" `
            --verbose `
            ".\out\$env:APPLICATION_NAME.msix"
      - name: Upload MSIX to Azure Files
        uses: azure/powershell@v1
        env:
          AZ_SA_NAME: ${{ vars.AZ_SA_NAME }}
          AZ_SA_MSIX_FILESHARE_NAME: ${{ vars.AZ_SA_MSIX_FILESHARE_NAME }}
        with:
          azPSVersion: "11.1.0"
          inlineScript: |
            $storageContext = New-AzStorageContext -StorageAccountName "$env:AZ_SA_NAME" -EnableFileBackupRequestIntent
            Set-AzStorageFileContent `
              -Context $storageContext `
              -ShareName "$env:AZ_SA_MSIX_FILESHARE_NAME" `
              -Source ".\out\$env:APPLICATION_NAME.msix" `
              -Path "$env:APPLICATION_NAME.msix"
